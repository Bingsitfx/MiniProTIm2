-- PROCEDURE: job_hire.createtalent(json)

-- DROP PROCEDURE IF EXISTS job_hire.createtalent(json);

CREATE OR REPLACE PROCEDURE job_hire.createtalent(
	IN data json)
LANGUAGE 'plpgsql'
AS $BODY$
DECLARE
	user_id INT;
	jopo_id INT;
BEGIN
	INSERT INTO job_hire.talent_apply (
		taap_user_entity_id,
		taap_entity_id,
		taap_status
	)
	SELECT
		x.taap_user_entity_id,
		x.taap_entity_id,
		'apply'
	FROM json_to_recordset(data) AS x(
		taap_user_entity_id INT,
		taap_entity_id INT,
		taap_status VARCHAR(15)
	)
	RETURNING taap_user_entity_id, taap_entity_id INTO user_id, jopo_id;
	
	INSERT INTO job_hire.talent_apply_progress (
		tapr_taap_user_entity_id,
		tapr_taap_entity_id,
		tapr_status,
		tapr_progress_name
	)
	VALUES (
		user_id,
		jopo_id,
		'Open',
		'Ready Test'
	);
END;
$BODY$;
ALTER PROCEDURE job_hire.createtalent(json)
    OWNER TO postgres;

==================================================
-- PROCEDURE: job_hire.createclient(json, json)

-- DROP PROCEDURE IF EXISTS job_hire.createclient(json, json);

CREATE OR REPLACE PROCEDURE job_hire.createclient(
	IN data json,
	IN data1 json)
LANGUAGE 'plpgsql'
AS $BODY$
declare
 address_id INT;
begin
 WITH result AS (
	INSERT INTO master.address (
		addr_line1,
		addr_line2,
		addr_postal_code,
		addr_spatial_location,
		addr_city_id
	)
	 SELECT
	 	x.addr_line1,
		x.addr_line2,
		x.addr_postal_code,
		x.addr_spatial_location,
		x.addr_city_id
	 FROM json_to_recordset(data) AS x(
	 	addr_line1 varchar(255),
		addr_line2 varchar(255),
		addr_postal_code varchar(10),
		addr_spatial_location json,
		addr_city_id INT
	 )
	RETURNING addr_id
 )
 SELECT addr_id INTO address_id FROM result;
 
 INSERT INTO job_hire.client (
  	 clit_name,
	 clit_about,
	 clit_addr_id,
	 clit_emra_id,
	 clit_indu_code
 )
 SELECT 
 	 x.clit_name,
	 x.clit_about,
	 address_id,
	 x.clit_emra_id,
	 x.clit_indu_code
 FROM json_to_recordset(data1) AS x(
	 clit_name varchar(256),
	 clit_about varchar(512),
	 clit_addr_id int,
	 clit_emra_id int,
	 clit_indu_code varchar(15)
 );
end;
$BODY$;
ALTER PROCEDURE job_hire.createclient(json, json)
    OWNER TO postgres;
=============================================
-- PROCEDURE: job_hire.createpostingjob(json, json, json)

-- DROP PROCEDURE IF EXISTS job_hire.createpostingjob(json, json, json);

CREATE OR REPLACE PROCEDURE job_hire.createpostingjob(
	IN data json,
	IN data1 json,
	IN data2 json)
LANGUAGE 'plpgsql'
AS $BODY$
DECLARE
	bus_entity_id INT;
	
BEGIN
	WITH result AS (
		INSERT INTO users.business_entity (entity_id) VALUES (DEFAULT)
		RETURNING entity_id
	)
	SELECT entity_id INTO bus_entity_id FROM result;

	INSERT INTO job_hire.job_post (
		jopo_entity_id,
		jopo_number,
		jopo_title,
		jopo_start_date,
		jopo_end_date,
		jopo_min_salary,
		jopo_max_salary,
		jopo_min_experience,
		jopo_max_experience,
		jopo_primary_skill,
		jopo_secondary_skill,
		jopo_publish_date,
		jopo_emp_entity_id,
		jopo_clit_id,
		jopo_joro_id,
		jopo_joty_id,
-- 		jopo_joca_id,
		jopo_addr_id,
		jopo_work_code,
		jopo_edu_code,
		jopo_status,
		jopo_open
	)
	SELECT
		bus_entity_id,
		x.jopo_number,
		x.jopo_title,
		x.jopo_start_date,
		x.jopo_end_date,
		x.jopo_min_salary,
		x.jopo_max_salary,
		x.jopo_min_experience,
		x.jopo_max_experience,
		x.jopo_primary_skill,
		x.jopo_secondary_skill,
		CASE WHEN x.jopo_status = 'publish' THEN CURRENT_DATE ELSE NULL END,
		x.jopo_emp_entity_id,
		x.jopo_clit_id,
		x.jopo_joro_id,
		x.jopo_joty_id,
-- 		x.jopo_joca_id,
		(SELECT clit_addr_id from job_hire.client WHERE clit_id  =  x.jopo_clit_id),
		x.jopo_work_code,
		x.jopo_edu_code,
		x.jopo_status,
		x.jopo_open
	FROM json_to_recordset(data) AS x(
		jopo_entity_id INT,
		jopo_number VARCHAR(25),
		jopo_title VARCHAR(256),
		jopo_start_date DATE,
		jopo_end_date DATE,
		jopo_min_salary INT,
		jopo_max_salary INT,
		jopo_min_experience INT,
		jopo_max_experience INT,
		jopo_primary_skill VARCHAR(256),
		jopo_secondary_skill VARCHAR(256),
		jopo_publish_date DATE,
		jopo_emp_entity_id INT,
		jopo_clit_id INT,
		jopo_joro_id INT,
		jopo_joty_id INT,
-- 		jopo_joca_id INT,
		jopo_addr_id INT,
		jopo_work_code VARCHAR(15),
		jopo_edu_code VARCHAR(15),
		jopo_status VARCHAR(15),
		jopo_open CHAR(1)
	);

	INSERT INTO job_hire.job_post_desc (
		jopo_entity_id,
		jopo_description,
-- 		jopo_responsibility,
		jopo_target,
		jopo_benefit
	)
	SELECT
		bus_entity_id,
		x.jopo_description,
-- 		x.jopo_responsibility,
		x.jopo_target,
		x.jopo_benefit
	FROM json_to_recordset(data1) AS x(
		jopo_entity_id INT,
		jopo_description JSON,
-- 		jopo_responsibility JSON,
		jopo_target JSON,
		jopo_benefit JSON
	);

	INSERT INTO job_hire.job_photo (
		jopho_entity_id,
		jopho_filename,
		jopho_filesize,
		jopho_filetype
	)
	SELECT
		bus_entity_id,
		x.jopho_filename,
		x.jopho_filesize,
		x.jopho_filetype
	FROM json_to_recordset(data2) AS x(
		jopho_entity_id INT,
		jopho_filename VARCHAR(55),
		jopho_filesize INT,
		jopho_filetype VARCHAR(15)
	);
END;
$BODY$;
ALTER PROCEDURE job_hire.createpostingjob(json, json, json)
    OWNER TO postgres;
===========================================
-- PROCEDURE: job_hire.updateclient(integer, json, json)

-- DROP PROCEDURE IF EXISTS job_hire.updateclient(integer, json, json);

CREATE OR REPLACE PROCEDURE job_hire.updateclient(
	IN id integer,
	IN data json,
	IN data1 json)
LANGUAGE 'plpgsql'
AS $BODY$
DECLARE
  address_id INT;
BEGIN
  SELECT clit_addr_id INTO address_id FROM job_hire.client WHERE clit_id = id;

  UPDATE master.address
  SET
  	addr_line1 = x.addr_line1,
    addr_line2 = x.addr_line2,
    addr_postal_code = x.addr_postal_code,
    addr_spatial_location = x.addr_spatial_location,
    addr_city_id = x.addr_city_id
  FROM json_to_recordset(data) AS x(
	  addr_line1 varchar(255),
      addr_line2 varchar(255),
      addr_postal_code varchar(10),
      addr_spatial_location json,
      addr_city_id INT
  )
  WHERE addr_id = address_id;
  
  UPDATE job_hire.client
  SET
    clit_name = x.clit_name,
    clit_about = x.clit_about,
    clit_addr_id = address_id,
    clit_emra_id = x.clit_emra_id,
    clit_indu_code = x.clit_indu_code
  FROM json_to_recordset(data1) AS x(
    clit_name varchar(256),
    clit_about varchar(512),
    clit_emra_id int,
    clit_indu_code varchar(15)
  )
  WHERE clit_addr_id = address_id;
END;
$BODY$;
ALTER PROCEDURE job_hire.updateclient(integer, json, json)
    OWNER TO postgres;
==================================================
-- PROCEDURE: job_hire.updatepostingjob(integer, json, json, json)

-- DROP PROCEDURE IF EXISTS job_hire.updatepostingjob(integer, json, json, json);

CREATE OR REPLACE PROCEDURE job_hire.updatepostingjob(
	IN id integer,
	IN data json,
	IN data1 json,
	IN data2 json)
LANGUAGE 'plpgsql'
AS $BODY$
DECLARE
	bus_entity_id INT;
BEGIN
    -- Retrieve the entity_id for the business entity
    SELECT jopo_entity_id INTO bus_entity_id
    FROM job_hire.job_post
    WHERE job_hire.job_post.jopo_entity_id=id;

    -- Update the job_post table
    UPDATE job_hire.job_post AS jp
    SET
        jopo_title = x.jopo_title,
        jopo_start_date = x.jopo_start_date,
        jopo_end_date = x.jopo_end_date,
        jopo_min_salary = x.jopo_min_salary,
        jopo_max_salary = x.jopo_max_salary,
        jopo_min_experience = x.jopo_min_experience,
        jopo_max_experience = x.jopo_max_experience,
        jopo_primary_skill = x.jopo_primary_skill,
        jopo_secondary_skill = x.jopo_secondary_skill,
        jopo_emp_entity_id = x.jopo_emp_entity_id,
        jopo_clit_id = x.jopo_clit_id,
        jopo_joro_id = x.jopo_joro_id,
        jopo_joty_id = x.jopo_joty_id,
        jopo_joca_id = x.jopo_joca_id,
        jopo_addr_id = x.jopo_addr_id,
        jopo_work_code = x.jopo_work_code,
        jopo_edu_code = x.jopo_edu_code,
        jopo_status = x.jopo_status,
		jopo_open = x.jopo_open
    FROM json_to_recordset(data) AS x(
        jopo_title VARCHAR(256),
        jopo_start_date DATE,
        jopo_end_date DATE,
        jopo_min_salary INT,
        jopo_max_salary INT,
        jopo_min_experience INT,
        jopo_max_experience INT,
        jopo_primary_skill VARCHAR(256),
        jopo_secondary_skill VARCHAR(256),
        jopo_emp_entity_id INT,
        jopo_clit_id INT,
        jopo_joro_id INT,
        jopo_joty_id INT,
        jopo_joca_id INT,
        jopo_addr_id INT,
        jopo_work_code VARCHAR(15),
        jopo_edu_code VARCHAR(15),
        jopo_status VARCHAR(15),
		jopo_open CHAR(1)
    )
    WHERE jp.jopo_entity_id = bus_entity_id;

    -- Update the job_post_desc table
    UPDATE job_hire.job_post_desc AS jpd
    SET
        jopo_description = x.jopo_description,
        jopo_responsibility = x.jopo_responsibility,
        jopo_target = x.jopo_target,
        jopo_benefit = x.jopo_benefit
    FROM json_to_recordset(data1) AS x(
        jopo_description JSON,
        jopo_responsibility JSON,
        jopo_target JSON,
        jopo_benefit JSON
    )
    WHERE jpd.jopo_entity_id = bus_entity_id;

    -- Update the job_photo table
    UPDATE job_hire.job_photo AS jp
    SET
        jopho_filename = x.jopho_filename,
        jopho_filesize = x.jopho_filesize,
        jopho_filetype = x.jopho_filetype
    FROM json_to_recordset(data2) AS x(
        jopho_filename VARCHAR(55),
        jopho_filesize INT,
        jopho_filetype VARCHAR(15)
    )
    WHERE jp.jopho_entity_id = bus_entity_id;
END;
$BODY$;
ALTER PROCEDURE job_hire.updatepostingjob(integer, json, json, json)
    OWNER TO postgres;
================================================
-- View: job_hire.client_view

-- DROP VIEW job_hire.client_view;

CREATE OR REPLACE VIEW job_hire.client_view
 AS
 SELECT client.clit_id,
    client.clit_name,
    client.clit_about,
    client.clit_modified_date,
    client.clit_addr_id,
    client.clit_emra_id,
    client.clit_indu_code,
    employee_range.emra_id,
    employee_range.emra_range_min,
    employee_range.emra_range_max,
    employee_range.emra_modified_date,
    industry.indu_code,
    industry.indu_name,
    address.addr_id,
    address.addr_line1,
    address.addr_line2,
    address.addr_postal_code,
    address.addr_spatial_location,
    address.addr_modifed_date,
    address.addr_city_id,
    city.city_id,
    city.city_name,
    city.city_modified_date,
    city.city_prov_id,
    province.prov_id,
    province.prov_code,
    province.prov_name,
    province.prov_modified_date,
    province.prov_country_code,
    country.country_code,
    country.country_name,
    country.country_modified_date
   FROM job_hire.client
     JOIN job_hire.employee_range ON client.clit_emra_id = employee_range.emra_id
     JOIN master.industry ON client.clit_indu_code::text = industry.indu_code::text
     JOIN master.address ON client.clit_addr_id = address.addr_id
     JOIN master.city ON address.addr_city_id = city.city_id
     JOIN master.province ON city.city_prov_id = province.prov_id
     JOIN master.country ON country.country_code::text = province.prov_country_code::text;

ALTER TABLE job_hire.client_view
    OWNER TO postgres;

=========================================================
-- View: job_hire.job_list_view

-- DROP VIEW job_hire.job_list_view;

CREATE OR REPLACE VIEW job_hire.job_list_view
 AS
 SELECT jopo.jopo_entity_id,
    jopo.jopo_number,
    jopo.jopo_title,
    jopo.jopo_start_date,
    jopo.jopo_end_date,
    jopo.jopo_min_salary,
    jopo.jopo_max_salary,
    jopo.jopo_min_experience,
    jopo.jopo_max_experience,
    jopo.jopo_primary_skill,
    jopo.jopo_secondary_skill,
    jopo.jopo_publish_date,
    jopo.jopo_clit_id,
    jopo.jopo_joro_id,
    joro.joro_name,
    jopo.jopo_joty_id,
    jopo.jopo_joca_id,
    jopo.jopo_addr_id,
    jopo.jopo_work_code,
    jopo.jopo_edu_code,
    jopo.jopo_status,
    jopo.jopo_id,
    jopo.jopo_open,
    jopo.jopo_emp_entity_id,
    jopo.jopo_modified_date,
    jode.jopo_description,
    jode.jopo_target,
    jode.jopo_benefit,
    jopho.jopho_id,
    jopho.jopho_filename,
    jopho.jopho_filesize,
    jopho.jopho_filetype,
    clit.clit_id,
    clit.clit_name,
    clit.clit_about,
    clit.clit_addr_id,
    clit.clit_emra_id,
    clit.clit_indu_code,
    addr.addr_id,
    addr.addr_line1,
    addr.addr_line2,
    addr.addr_postal_code,
    addr.addr_spatial_location,
    addr.addr_city_id,
    city.city_id,
    city.city_name,
    city.city_prov_id
   FROM job_hire.job_post jopo
     JOIN job_hire.job_post_desc jode ON jopo.jopo_entity_id = jode.jopo_entity_id
     JOIN job_hire.job_photo jopho ON jopo.jopo_entity_id = jopho.jopho_entity_id
     JOIN job_hire.client clit ON jopo.jopo_clit_id = clit.clit_id
     JOIN master.address addr ON clit.clit_addr_id = addr.addr_id
     JOIN master.city city ON addr.addr_city_id = city.city_id
     JOIN master.job_role joro ON jopo.jopo_joro_id = joro.joro_id;

ALTER TABLE job_hire.job_list_view
    OWNER TO postgres;

====================================================
-- View: job_hire.pro_candidate_view

-- DROP VIEW job_hire.pro_candidate_view;

CREATE OR REPLACE VIEW job_hire.pro_candidate_view
 AS
 SELECT talent_apply.taap_user_entity_id,
    talent_apply.taap_entity_id,
    talent_apply.taap_scoring,
    talent_apply.taap_modified_date,
    talent_apply.taap_status,
    talent_apply_progress.tapr_id,
    talent_apply_progress.tapr_status,
    talent_apply_progress.tapr_comment,
    talent_apply_progress.tapr_progress_name,
    job_post.jopo_title,
    job_post.jopo_clit_id,
    users.user_entity_id,
    users.user_name,
    users.user_first_name,
    users.user_last_name,
    users.user_photo,
    users_email.pmail_address,
    users_phones.uspo_number,
    users_phones.uspo_ponty_code
   FROM job_hire.talent_apply
     JOIN job_hire.talent_apply_progress ON talent_apply.taap_user_entity_id = talent_apply_progress.tapr_taap_user_entity_id
     JOIN job_hire.job_post ON talent_apply.taap_entity_id = job_post.jopo_entity_id
     JOIN users.users ON talent_apply.taap_user_entity_id = users.user_entity_id
     JOIN users.users_email ON users.user_entity_id = users_email.pmail_entity_id
     JOIN users.users_phones ON users.user_entity_id = users_phones.uspo_entity_id;

ALTER TABLE job_hire.pro_candidate_view
    OWNER TO postgres;

